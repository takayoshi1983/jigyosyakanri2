#この仕様書には絵文字は使用しないでください


● 事業者管理アプリ - 最新版仕様書

  プロジェクト概要

  Supabase + Vercel サーバーレス完全移行版事業者管理アプリケーション

- 本番URL: https://mori-jigyosya.vercel.app/
- Supabase Project: https://ocfljsoxxgmnzqlquchx.supabase.co
- リポジトリ: 

  技術スタック

  フロントエンド

  - HTML/CSS/JavaScript (Vanilla)
  - ホスティング: Vercel (サーバーレス)
  - 認証: Google OAuth 2.0
  - UI: カスタムドロップダウン、アコーディオンメニュー、モダントースト通知、テーブルリサイズ

  バックエンド・データベース

  - データベース: Supabase PostgreSQL
  - 認証: Supabase Auth (Google OAuth連携)
  - API: Supabase REST API + Edge Functions
  - 自動化: pg_cron拡張による定期処理
  - リアルタイム: Supabaseリアルタイム機能

  データベース構造

1. app_links

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
name
varchar
NOT NULL
url
text
NOT NULL
display_order
integer
DEFAULT 0
created_at
timestamp
DEFAULT now()

2. backup_history

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
backup_date
timestamp
backup_type
varchar
status
varchar
file_name
varchar
file_size_kb
integer
total_records
integer
error_message
text
created_at
timestamp
DEFAULT now()

3. clients

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
name
varchar
NOT NULL
fiscal_month
integer
CHECK (1–12)
staff_id
integer
FK → staffs.id
accounting_method
varchar
DEFAULT '記帳代行'
status
varchar
DEFAULT 'active'
custom_tasks_by_year
jsonb
DEFAULT '{}'
finalized_years
jsonb
DEFAULT '[]'
overall_memo
text
DEFAULT ''
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

4. default_tasks

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
task_name
varchar
accounting_method
varchar
tasks
jsonb
display_order
integer
DEFAULT 0
is_active
boolean
DEFAULT true
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

5. editing_sessions

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
client_id
integer
FK → clients.id
user_id
varchar
NOT NULL
started_at
timestamp
DEFAULT now()
last_activity
timestamp
DEFAULT now()

6. monthly_tasks

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
client_id
integer
FK → clients.id
month
varchar
NOT NULL
tasks
jsonb
DEFAULT '{}'
status
varchar
DEFAULT 'pending'
url
text
memo
text
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()
task_memos
jsonb
DEFAULT '{}'
completed
boolean
NOT NULL, DEFAULT false

7. settings

Column
Type
Constraints / Default
Keys
key
varchar
NOT NULL
PK
value
jsonb
NOT NULL
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

8. staffs

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
name
varchar
NOT NULL
email
varchar
role
varchar
DEFAULT 'staff'
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

9. task_templates

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
template_name
varchar
NOT NULL
task_name
varchar
NOT NULL
description
text
client_id
integer
FK → clients.id
staff_id
integer
FK → staffs.id
estimated_time_hours
decimal
reference_url
text
default_assignee_id
integer
FK → staffs.id
is_shared
boolean
DEFAULT false
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

10. recurring_tasks

Column
Type
Constraints / Default
Keys
id
integer
NOT NULL, DEFAULT nextval
PK
template_id
integer
FK → task_templates.id
client_id
integer
FK → clients.id
assignee_id
integer
FK → staffs.id
frequency_type
varchar
NOT NULL
create_days_before
integer
DEFAULT 3
due_day
integer
DEFAULT 25
display_order
integer
DEFAULT 0
is_active
boolean
DEFAULT true
created_at
timestamp
DEFAULT now()
updated_at
timestamp
DEFAULT now()

Relationships (Foreign Keys)
clients.staff_id → staffs.id
editing_sessions.client_id → clients.id
monthly_tasks.client_id → clients.id
task_templates.client_id → clients.id
task_templates.staff_id → staffs.id
task_templates.default_assignee_id → staffs.id
recurring_tasks.template_id → task_templates.id
recurring_tasks.client_id → clients.id
recurring_tasks.assignee_id → staffs.id


  認証・セキュリティ

  Google OAuth認証 + 二段階認証システム

  - 認証プロバイダー: Google OAuth 2.0
- 承認済みオリジン: https://mori-jigyosya.vercel.app
  - セッション管理: Supabase Auth自動管理
  - ログイン頻度: 1日1回認証（自動セッション管理）

  二段階認証フロー - 実装完了
  - ステップ1: 共有Googleアカウントでのログイン（全担当者共通）
  - ステップ2: 個別担当者選択画面（select-user.html）
  - sessionStorage管理: selected-staff-id・selected-staff-nameの保存
  - 自動ルーティング: 未選択時は自動的に担当者選択画面へリダイレクト
  - 管理者権限: staff_id = 1は全データアクセス可能（フィルター無し）
  - 担当者権限: 各担当者は自分の割り当てクライアントのみ表示

  Row Level Security (RLS) - 実装完了
  - データアクセス制御: Supabase RLS
  - 認証必須: 未ログイン時はデータアクセス不可
  - Anon Key: 公開（フロントエンド用、RLSで保護）

  主要機能

  1. クライアント管理

  - 一覧表示: 担当者別フィルター、検索機能
  - CRUD操作: 追加、編集、削除、再有効化
  - 関与終了機能: 業務終了クライアントのステータス管理
    ├── グレーアウト表示: 設定により非表示/グレー表示切替
    ├── 復活機能: 関与終了状態からの復帰
    └── 管理者権限削除: 物理削除は管理者のみ実行可能
  - カスタムタスク設定: クライアント独自の項目設定
  - 年度確定機能: 特定年度のタスク項目ロック
  - 全体メモ機能: クライアント全体に関するメモ記録・保存

  1.5. 担当者管理機能

  - CRUD操作: 担当者の追加・編集・削除（削除制限機能付き）
  - 割り当て管理: 担当クライアント数の自動集計・表示
  - 削除制限: 担当クライアントが存在する場合の削除防止機能
  - CSV抽出機能: 担当者情報の完全エクスポート
    ├── 出力項目: ID、担当者名、メール、権限、担当クライアント数、担当先一覧、作成・更新日時
    ├── 権限日本語化: admin→管理者、staff→担当者の自動変換
    ├── Excel対応: BOM付きUTF-8エンコーディング
    └── 担当先一覧: セミコロン区切りでの複数クライアント名表示
  - UI最適化: モーダルサイズ調整（700px幅、85vh高さ制限）

  2. 月次進捗管理

  - 進捗入力: チェックボックス形式
  - ステータス表示: `completed`フラグに基づき、最後に完了した年月を表示
  - 自動完了機能: 詳細画面でタスクを100%にして保存すると、自動で`completed`フラグが更新され、10種類の達成時エフェクトからランダムに1つが再生される
  - URL・メモ: 各月次記録に付加情報

  3. タスク項目管理

  - デフォルトタスク: 全クライアント共通の初期項目
  - カスタムタスク: クライアント別独自項目
  - 年度継承: 新年度アクセス時の前年度項目継承
  - タスク伝播: 項目変更時の未確定年度への反映

  4. 年度確定システム

  - 確定機能: 特定年度のタスク項目をロック
  - 編集制限: 確定済み年度は編集不可
  - 継承制御: 確定済み項目の新年度継承

  5. データ管理

  - **自動バックアップシステム**: GitHub Actions による24時間365日サーバーレス自動実行
    ├── 毎日0:00（JST）自動実行: GitHub Actions cron スケジューラによる確実な実行
    ├── 週次ローテーション: Sunday-Saturday フォルダでストレージ最適化
    ├── クラウドストレージ: Supabase Storage による安全な保管
    ├── 実行履歴管理: backup_history テーブルでの監視・トラッキング
    ├── 無料プラン対応: Supabase無料プランでも完全動作
    ├── セキュア設計: GitHub Secrets による認証情報暗号化保存
    ├── ページネーション対応: 1000件以上のデータも完全バックアップ
    └── 削除後新規登録方式: RLSポリシー対応の安全なアップロード処理
  - **手動バックアップシステム**: JSON形式・週次ローテーション・File System Access API対応・緊急時即座実行
  - **安全な復元機能**: 外部キー制約・データ整合性完全保証
  - CSVエクスポート: UTF-8 BOM付きExcel対応
  - CSVインポート: 複数エンコーディング対応
  - データベース初期化: 完全リセット機能

  6. 編集制御

  - 悲観ロック: 編集競合防止
  - 強制解除: 編集セッション強制終了
  - 自動タイムアウト: 一定時間後の自動解除

  7. UI/UX改善機能

  - モダントースト通知システム
  - テーブル列幅調整システム

  8. その他アプリ連携機能

  - リンク管理: モーダル画面でのURLリンク管理（名称・URL）
  - CRUD操作: 追加・削除・保存に対応
  - 表示順変更: ドラッグ＆ドロップによる並べ替え
  - 動的ボタン生成: メイン画面のアコーディオン内に、登録したリンクをボタンとして動的生成
  - 外部リンク遷移: ボタンクリックで設定したURLを新しいタブで開く

  9. タスク管理システム - 実装完了

  **統合アプローチによる機能拡張**
  - **既存アプリへの完全統合**: 事業者管理アプリの全リソース（DB・認証・UI）を活用
  - **マスターデータ連携**: clientsテーブル・staffsテーブルを完全参照
  - **統一ナビゲーション**: 既存のタブシステムに「タスク管理」タブを追加

  **新規データベーステーブル（3つ）**
  - **tasksテーブル**: メインタスク管理（client_id、assignee_id、requester_id、ステータス、期限等）
  - **task_templatesテーブル**: よく使用するタスクのテンプレート管理
  - **recurring_tasksテーブル**: 定期実行タスクの自動生成ルール

  **コア機能**
  - **ワークフロー管理**: 依頼中 → 作業完了（確認待ち） → 確認完了の3段階ステータス
    ├── **データベース設計**: ステータス値は「依頼中」「作業完了」「確認完了」で保存
    ├── **フロントエンド表示**: 「作業完了」→「✅ 確認待ち」として視覚的に表示
    └── **設計思想**: データベースとUI表示を分離した一貫性のある設計
  - **担当者ベース表示**: サイドバーでの担当者別タスクフィルタリング
  - **多様な表示形式**: リスト表示・カード表示・カレンダー表示（予定）
  - **スマート通知システム**: 関係者にのみ5秒間隔での新規タスク通知
  - **4段階優先度ソート**: ステータス → 期限切れ → 期限日 → 作成日の優先度システム
  - **動的タイトル更新**: 担当者フィルタ時「[担当者名] 受任タスク一覧」表示

  **マイタスクパネル機能**
  - **受任タスク**: 自分が担当するタスクを優先順で表示（依頼中 → 確認待ち → 確認完了）
  - **依頼タスク**: 自分が作成したタスクを優先順で表示（確認待ち → 依頼中 → 確認完了）
  - **簡易表示モード**: 事業者名・タスク名・期限日・ステータスのみの効率的表示
    ├── **トグルスイッチ制御**: 全マイタスクセクション（受任・依頼・確認完了）統一制御
    ├── **緑色UI**: オン時は緑色背景・光彩効果の視覚的フィードバック
    └── **設定保存**: LocalStorageによる個人設定保持
  - **コンパクト表示**: 事業者リンク・期限警告・ステータスバッジを含む効率的なレイアウト
  - **カウント表示最適化**: 受任タスク一覧は「依頼中」ステータスのみカウント
  - **確認完了タスク視覚化**: タスク全体グレーアウト・ステータスボタン灰色表示
  - **時間ベース非表示**: 確認待ち→翌日非表示、確認完了→1日後非表示の自動制御
    ├── **受託者への非表示**: ステータス「作業完了」（表示「確認待ち」）がcompleted_at翌日（日本時間）に非表示
    ├── **依頼者には継続表示**: 受託者の確認待ちタスクは依頼者側では引き続き表示
    ├── **確認完了の全員非表示**: ステータス「確認完了」かつconfirmed_atがある場合、全員に翌日非表示
    └── **日本時間基準**: UTC+9での日付変更（0:00）を基準とした実用的な運用

  **高機能履歴閲覧システム**
  - **期間指定フィルター**: 現在のタスクのみ / 過去7日間 / 過去30日間 / すべての履歴
  - **詳細検索機能**: タスク名・事業者名・内容での全文検索（正規化対応）
  - **表示設定制御**: 確認完了タスク・通常非表示タスクの表示/非表示切り替え
  - **ローカルストレージ連携**: 履歴設定の自動保存・復元機能
  - **履歴モード切り替え**: 黄色グラデーションボタンでの視覚的な履歴表示切り替え

  **CRUD操作・編集機能**
  - **タスク登録**: 事業者選択・担当者選択・期限設定・参照URL等の包括的入力
  - **タスク編集**: インライン編集・モーダル編集対応
  - **タスク詳細モーダル機能拡張**:
    ├── **依頼者情報表示**: モーダルタイトル右に依頼者名表示
    ├── **ステータスボタン統合**: モーダル内でのリアルタイムステータス変更
    ├── **動的表示更新**: ステータス変更時の即座UI反映
    └── **参照URL高さ制限**: 最大60px・スクロール表示でモーダル高さ固定
  - **ステータス更新**: クリック可能なステータスバッジでの即座更新
  - **バリデーション**: 必須項目チェック・日付整合性確認

  **UI/UX最適化**
  - **レスポンシブデザイン**: 全デバイス対応の統一UI
  - **統一デザインシステム**: 既存アプリのCSS変数・コンポーネントを完全活用
  - **モダンボタンデザイン**: 黄色グラデーション・ホバーエフェクト・アニメーション
  - **期限警告システム**: 期限切れタスクの視覚的警告表示（赤色・アイコン）
  - **統一ステータス色**: 確認完了ステータスは全箇所で灰色表示（メイン・マイタスク共通）

  **技術仕様**
  - **フロントエンド**: HTML/CSS/JavaScript（Vanilla JS）
  - **バックエンド**: Supabase PostgreSQL + Row Level Security (RLS)
  - **認証統合**: 既存Google OAuth認証システムを共有
  - **API連携**: Supabase REST API による完全なCRUD操作
  - **リアルタイム更新**: スマート通知システムによる効率的な更新通知

  **予定未定ステータス機能 - 実装完了**
  - **4段階ステータスシステム**: 予定未定 → 依頼中 → 作業完了（確認待ち） → 確認完了
  - **自動ステータス遷移**:
    - 予定未定タスクに work_date 追加 → 自動的に「依頼中」に変更
    - 依頼中の随時タスクから work_date 削除 → 自動的に「予定未定」に変更
    - 自己タスク（requester = assignee）: 作業完了時に「確認待ち」をスキップし「予定未定」へ直接移行
    - 他者タスク（requester ≠ assignee）: 作業完了 → 確認待ち → 予定未定のワークフロー
  - **カレンダー・ガントチャートバッジシステム**:
    - 予定日なしの予定未定タスク: 緑色丸バッジ「未」表示
    - 予定日ありのタスク: 青色丸バッジ「A, B, C...」のアルファベット識別子表示
    - バッジ自動割り当て: updateCalendarView() による動的識別子付与
  - **ビュー別表示制御**:
    - リスト・マイタスク・タスク編集: 「予定未定」と「依頼中」を別ステータスとして表示
    - カレンダー・ガントチャート: 「予定未定」と「依頼中」を同一セクション（依頼中タスク）で表示
    - カンバンビュー: 4列表示（予定未定・依頼中・確認待ち・確認完了）
  - **ガントチャート機能強化**:
    - 最低5行常時表示: タスク不足時にプレースホルダー行「（ここにタスクをドロップ）」を表示
    - デフォルト想定時間: estimated_time_hours 未設定時に3時間をデフォルト適用
    - ドラッグ&ドロップ対応: プレースホルダー行も含めた全行でドロップゾーン機能
  - **ステータス色設定**:
    - 予定未定: 緑色（#d4edda 背景、#155724 文字、#28a745 枠線）
    - 依頼中: 黄色（既存）
    - 確認待ち: 青色（既存）
    - 確認完了: 灰色（既存）
  - **データベース仕様**:
    - CHECK制約: status IN ('予定未定', '依頼中', '作業完了', '確認完了')
    - マイグレーション: migration-add-unscheduled-status.sql による段階的拡張
  - **自己タスクワークフロー**:
    - 予定日あり → 作業完了: 「予定未定」へ移行、work_date 削除、「予定日を削除し「予定未定」に変更しました」メッセージ表示
    - 予定日なし → 作業完了: 「予定未定」維持、「予定日を削除し、ステータスを「予定未定」に変更します」メッセージ表示
  - **UI実装詳細**:
    - ステータスフィルター: 全5選択肢（全て・予定未定・依頼中・作業完了・確認完了）
    - カンバン列: 4列レイアウトで予定未定専用列追加
    - ステータスバッジ: 📌 予定未定（緑）、📝 依頼中（黄）、✅ 確認待ち（青）、☑️ 確認完了（灰）
    - カウント表示: 「依頼中」と「予定未定」を合算してタスク数表示

  10. 高度分析機能付き進捗管理ダッシュボード

  **フェーズ1: 進捗管理ダッシュボード** - 実装完了
  - **多条件フィルター**: 期間・担当者・決算月での絞り込み
  - **動的サマリー**: 全体進捗率・完了タスク数・要注意クライアント自動検出
  - **進捗マトリクス表**: 事業者×年月のマトリクス表示
  - **完全ソート機能**: 事業者名・進捗率・担当者・決算月・月別進捗での並び替え
  - **月別進捗列**: 選択期間に応じた動的列生成
  - **カラーコード表示**: 緑（80%以上）/黄（50-79%）/赤（50%未満）
  - **エクスポート機能**: CSV・Excel（3種類）・PDF形式での出力
    ├── Excel統合シート: サマリーと進捗マトリクスを1シートに統合
    ├── Excel進捗表示: 基本・ヘッダー強調・アイコン付きの3形式
    └── PDF横向き出力: 月次データの色分け表示対応

  **フェーズ2: 担当者別パフォーマンスダッシュボード** - 実装完了
  - **パフォーマンス指標**: 担当クライアント数・平均完了率・完了月数・遅延発生月数
  - **4段階評価システム**: 優秀（95%以上）/良好（85-94%）/標準（70-84%）/要改善（70%未満）
  - **柔軟期間設定**: 今年度・前四半期・6ヶ月・12ヶ月・カスタム期間対応
  - **完全ソート機能**: 全パフォーマンス指標でのソート対応
  - **詳細確認連携**: ワンクリックで進捗ダッシュボードへ遷移
  - **相互ナビゲーション**: 進捗⟷パフォーマンスダッシュボード間の移動

  **フェーズ3: 週次進捗グラフ機能** - 実装完了
  - **Chart.js統合**: 3軸折れ線グラフによる週次推移表示（進捗率・完了タスク数・要注意クライアント数）
  - **スナップショット保存**: weekly_progress_snapshots テーブルによる履歴管理
  - **フィルター連動**: 既存フィルター条件（期間・担当者・決算月・事業者名）完全対応
  - **前週比計算**: 累積進捗率ベースでの前週比増減値表示
  - **要注意クライアント可視化**: 進捗50%未満クライアントの自動検出・警告表示
  - **ツールチップ最適化**: 各グラフライン固有の詳細情報表示
  - **UI改善**: トグル表示・統計情報・最新記録日表示

  11. テンプレート管理システム - 実装完了

  **統合アプローチによる3列レイアウト設計**
  - **既存タスク管理との統合**: task-management.htmlページ内に完全統合
  - **3列レイアウト構成**: 月次自動タスク作成・個別テンプレート・共有テンプレートの並列表示
  - **統一UI**: 既存タスク管理システムと同一のデザインシステム採用

  **新規データベーステーブル拡張**
  - **task_templatesテーブル**: client_id・reference_url・estimated_time_hours・default_assignee_id対応
  - **recurring_tasksテーブル**: create_days_before・due_day・display_order列追加
  - **データベースマイグレーション**: K-3-fix-client-column.sql・K-4-add-recurring-fields.sqlによる段階的拡張

  **月次自動タスク作成機能**
  - **定期実行設定**: 毎月の期限日・何日前作成の詳細設定
  - **テンプレート連携**: task_templatesテーブルとの完全リレーション
  - **自動化ロジック**: 設定した日数に基づく自動タスク生成システム
  - **編集・削除機能**: 作成済み月次タスクの詳細編集・削除対応

  **検索可能クライアント選択機能**
  - **SearchableSelectコンポーネント**: 新規タスク作成と同一の検索機能実装
  - **リアルタイム検索**: 日本語正規化対応・インクリメンタル検索
  - **フォールバック機能**: コンポーネント初期化失敗時の通常selectフォールバック
  - **3つのモーダル対応**: 月次自動・個別・共有テンプレート全てに実装

  **テンプレート管理機能**
  - **個別テンプレート**: クライアント専用テンプレート（既定受託者設定対応）
  - **共有テンプレート**: 全クライアント共通テンプレート（既定受託者設定対応）
  - **包括的CRUD操作**: 作成・編集・削除・表示の完全対応
  - **データ整合性**: 外部キー制約・カスケード削除による安全な操作

  **UI/UX最適化**
  - **3列グリッドレイアウト**: CSS Grid による効率的レイアウト
  - **統一フォームデザイン**: 事業者名・参照URL・想定時間・既定受託者の標準化
  - **モード切り替え**: 表示モード・編集モードの明確な分離
  - **エラーハンドリング**: 包括的エラー処理・ユーザーフレンドリーメッセージ

  **データ連携・整合性**
  - **マスターデータ活用**: clients・staffsテーブルとの完全連携
  - **RLS対応**: Supabase Row Level Securityによるアクセス制御
  - **JSON処理**: estimated_time_hours・reference_url等のデータ型対応
  - **null値処理**: optional chaining・fallback値による堅牢な実装

  ユーザーインターフェース

  メイン画面（analytics.html）

  - **統合ダッシュボード**: 進捗管理機能と顧客一覧機能を統合
  - **多条件フィルター**: 期間・担当者・決算月・事業者名での高度絞り込み
  - **進捗マトリクス表**: 事業者×年月のマトリクス表示（ID列・経理方式列・編集ボタン列付き）
  - **週次進捗グラフ**: Chart.js による3軸折れ線グラフ
  - **動的サマリー**: 全体進捗率・完了タスク数・要注意クライアント自動検出
  - **完全ソート機能**: 全列でのソート対応
  - **アコーディオンメニュー**: 「管理メニュー」と「その他アプリ」の2種類を配置
  - **エクスポート機能**: CSV・Excel・PDF形式での出力
  - **レスポンシブ対応**: 全デバイス対応の統合UI

  管理メニュー

  - 管理メニュー
    ├── 担当者管理（CSV抽出機能付き）
    ├── 顧問先追加
    ├── 基本設定
    ├── 項目の初期値の設定
    ├── バックアップ設定
    ├── CSVエクスポート
    ├── CSVインポート
    ├── 列幅リセット
    └── データベース初期化
  - その他アプリ
    ├── URL設定
    └── (動的に生成されるURLリンクボタン)

  詳細画面アコーディオン

  - データ管理メニュー
    ├── この年度の項目を確定
    ├── 項目を翌期以降に再反映
    ├── 削除された項目を自動削除
    ├── データ整合性チェック
    └── 項目の変更

  **分析機能画面**

  - **統合メイン画面**: analytics.html（新メイン画面）
    ├── フィルター & アクションエリア: 多条件絞り込み
    ├── 動的サマリーダッシュボード: リアルタイム集計結果
    ├── 進捗マトリクス表: 事業者×年月のマトリクス（ID・経理方式・編集ボタン列付き）
    ├── 週次進捗グラフ: Chart.js による推移表示
    ├── 顧客管理機能: 検索・フィルター・CRUD操作
    └── 完全ソート機能: 全列でのソート対応

  - **担当者別パフォーマンスダッシュボード**: performance.html
    ├── 期間設定エリア: 柔軟な期間選択
    ├── パフォーマンス一覧表: 担当者別指標表示
    ├── 4段階評価システム: 視覚的パフォーマンス評価
    └── 詳細確認連携: 統合メイン画面への遷移

  詳細・編集画面

  - 月次進捗表: 12ヶ月分の進捗管理
  - カスタムタスク設定: ドラッグ&ドロップ対応
  - 年度確定ボタン: 動的表示制御
  - 編集ロック表示: 編集中ユーザーの表示
  - ステータス管理UI
  - モバイル最適化: 横画面推奨表示、固定要素無効化、タッチフレンドリーUI

  設定・カスタマイズ

  環境設定

  // Supabase設定（自動検出）
  const SUPABASE_URL = 'https://lqwjmlkkdddjnnxnlyfz.supabase.co'
  const SUPABASE_ANON_KEY = '[自動設定]'

  カスタマイズ可能項目

  - デフォルトタスク項目: 基本設定から変更可能
  - 担当者リスト: 動的追加・編集
  - 年度設定: 会計年度に応じた自動調整
  - UI色調: CSS変数での一括変更
  - 外部リンク: 「その他アプリ」メニューから自由に設定可能

  パフォーマンス

  - CDN配信: Vercel Edge Network, jsDelivr (SortableJS)

  (その他変更なし)

  最新の進捗（2025年10月10日更新）

#### 今回セッション（10/10）- GitHub Actions自動バックアップシステム完全実装

1. **GitHub Actions自動バックアップシステム実装** - 完了
   - **無料プラン対応**: Supabase無料プランでも動作するGitHub Actions方式採用
   - **ワークフロー作成**: .github/workflows/daily-backup.yml による毎日0:00 JST実行設定
   - **バックアップスクリプト**: .github/scripts/backup.js による全テーブルバックアップ処理
   - **GitHub Secrets設定**: SUPABASE_URL・SUPABASE_ANON_KEY（実際はservice_role key）の暗号化保存
   - **cron式設定**: 0 15 * * * (15:00 UTC = 翌日0:00 JST) による自動実行

2. **ページネーション対応実装** - 完了
   - **1000件制限突破**: Supabaseの1000件制限を超えるデータ取得機能実装
   - **バッチ処理**: 1000件ずつページネーションで全データ取得
   - **monthly_tasks対応**: 1000件以上のタスクデータも完全バックアップ可能
   - **動的ループ処理**: データがなくなるまで自動的に取得継続

3. **RLSポリシー対応修正** - 完了
   - **service_role key使用**: anon keyからservice_role keyに変更でRLS制約回避
   - **削除後新規登録方式**: upsert: true から削除→新規登録方式に変更
   - **Storage権限問題解決**: RLS INSERT権限のみで動作する安全な実装
   - **エラー修正**: new row violates row-level security policy エラー完全解決

4. **セットアップドキュメント作成** - 完了
   - **BACKUP-SETUP-GUIDE.md**: GitHub Actions完全セットアップガイド作成
   - **手順書詳細化**: Step 1-6の詳細セットアップ手順記載
   - **トラブルシューティング**: よくあるエラーと解決方法の記載
   - **セキュリティ説明**: GitHub Secretsの安全性・使用方法の詳細説明

5. **.gitignore更新** - 完了
   - **機密情報保護**: supabase-env.js・*.key・secrets/・.env.local等を除外設定
   - **node_modules除外**: npm依存関係ファイルの除外設定追加
   - **パブリックリポジトリ対応**: 公開リポジトリでも安全な設定

6. **Edge Function更新** - 完了
   - **Supabase URL更新**: supabase/functions/daily-backup/index.ts の接続先を新環境に更新
   - **テーブル構造対応**: 既存のテーブルリスト（clients, staffs, monthly_tasks等）を維持

7. **実運用テスト** - 完了
   - **手動実行成功**: GitHub Actions手動トリガーでバックアップ実行成功
   - **Storage確認**: weekly/Friday/jigyosya-backup-Friday.json 生成確認
   - **backup_history記録**: バックアップ履歴テーブルへの記録成功
   - **全テーブルバックアップ**: clients(68)・staffs(5)・monthly_tasks(1258)等全データ取得確認

8. **Git管理** - 完了
   - **コミット**: Add GitHub Actions automatic backup system
   - **プッシュ**: GitHubリポジトリへの反映完了
   - **バグ修正コミット**: Fix RLS policy issues・Add pagination の追加コミット実施

#### 前回セッション（10/5）- 予定未定ステータス機能完全実装・休日管理CSVインポート修正

1. **CSVインポートバグ修正** - 完了
   - **変数名不一致修正**: task-management.js:6302の `holidays.length` → `holidaysToUpsert.length` に修正
   - **エラー解決**: 休日管理インポート時の ReferenceError 解消
   - **結果表示正常化**: インポート件数の正確な表示復旧

2. **予定未定ステータス機能完全実装** - 完了
   - **4段階ステータスシステム導入**: 予定未定・依頼中・作業完了・確認完了の新体系
   - **データベースマイグレーション**: migration-add-unscheduled-status.sql による CHECK制約追加
   - **自動ステータス遷移実装**: work_date追加/削除に連動した自動ステータス変更ロジック
   - **カレンダー・ガントバッジシステム**: 緑色「未」バッジと青色アルファベットバッジの実装

3. **自己タスク専用ワークフロー実装** - 完了
   - **確認待ちスキップロジック**: requester_id === assignee_id 時の特別処理
   - **予定日削除自動化**: 作業完了時の work_date 自動削除機能
   - **ユーザーフィードバック**: 状況別メッセージ表示（予定日あり/なし）
   - **早期リターン設計**: 通常ワークフローとの明確な分離

4. **ビュー別表示制御実装** - 完了
   - **リスト・マイタスク・編集**: 予定未定と依頼中を別ステータスとして表示
   - **カレンダー・ガントチャート**: 両ステータスを同一セクション（依頼中タスク）に統合表示
   - **カンバンビュー**: 4列レイアウト（予定未定専用列追加）による視覚的分離
   - **カウント表示統一**: 予定未定・依頼中を合算したタスク数表示

5. **ガントチャート機能強化** - 完了
   - **最低5行常時表示**: プレースホルダー行「（ここにタスクをドロップ）」の実装
   - **デフォルト想定時間**: estimated_time_hours 未設定時に3時間を自動適用
   - **プレースホルダーUI**: is_placeholder フラグによる空行制御
   - **ドラッグ&ドロップ最適化**: タスク不足時もガントチャート操作可能

6. **バッジシステム実装** - 完了
   - **緑色「未」バッジ**: 予定日なしの予定未定タスク専用
   - **青色アルファベットバッジ**: 予定日ありタスクへの識別子付与
   - **alphabetId自動割り当て**: updateCalendarView() による動的処理
   - **表示一貫性確保**: updateAllTasksCards() での pendingTasks 直接利用

7. **CSS実装・スタイル統一** - 完了
   - **予定未定ステータス色**: task-styles.css に3種類のステータスクラス追加
   - **緑色UI**: 背景 #d4edda、文字 #155724、枠線 #28a745 の統一配色
   - **コンパクト表示対応**: compact-status-unscheduled・my-task-status-unscheduled 追加

8. **UI要素更新** - 完了
   - **ステータスフィルター**: task-management.html に「予定未定」選択肢追加
   - **カンバン列追加**: 📌 予定未定列の新規実装（緑色左枠線）
   - **ステータスバッジ設定**: createClickableStatusBadge() への予定未定設定追加
   - **フォームバリデーション**: 新規作成時の随時タスク判定・ステータス自動設定

9. **エラー修正・最適化** - 完了
   - **ガントチャート表示修正**: alphabetId喪失問題の解決（pendingTasks直接利用）
   - **想定時間デフォルト値**: estimated_time_hours のnull/0チェック・3時間自動適用
   - **データベース制約対応**: Supabase CHECK制約への予定未定ステータス追加実行

10. **仕様書更新** - 完了
    - **claude-Specification.txt更新**: 予定未定ステータス機能の完全ドキュメント化
    - **技術詳細記載**: 自動遷移ロジック・バッジシステム・ビュー別制御の詳細仕様
    - **セッション記録**: 実装プロセスの時系列記録追加

#### 今回セッション（10/5続き）- カレンダービュー強化・全担当者表示改善・パフォーマンス最適化

1. **カード表示形式削除** - 完了
   - **未使用コード削除**: task-management.htmlからカード表示ボタンとカードビューセクション削除
   - **JavaScript関数削除**: updateCardView(), createTaskCard(), initializeKanbanSortable() 等を削除
   - **UI簡素化**: リストとカレンダーの2形式に集約

2. **表示形式切替UIリデザイン** - 完了
   - **配置変更**: フィルターエリアからパネルヘッダーへ移動
   - **ラジオボタン化**: ボタンからラジオボタンに変更（"○ 📋 リスト" / "○ 📅 カレンダー"）
   - **レイアウト**: "📋 全体記帳依頼・タスク管理 ○○件 表示形式: ○ 📋 リスト ○ 📅 カレンダー"
   - **イベント処理**: radio.addEventListener('change') に更新

3. **ステータス表示不整合修正** - 完了
   - **バグ**: タスクID 44が マイタスクで「依頼中」、全体タスク管理で「予定未定」と表示
   - **原因**: createCompactTaskItem()のstatusConfigに'予定未定'エントリが欠落
   - **修正**: statusConfigに '予定未定': { class: 'compact-status-unscheduled', text: '予定未定' } 追加
   - **ステータス遷移**: createCompactClickableStatus()も同様に修正

4. **カレンダービュー強化（オプションA）: タスクカード3D効果** - 完了
   - **視覚効果追加**: work_date設定済みタスクに立体的な浮遊効果
   - **スタイル実装**:
     - 青色グラデーション背景: linear-gradient(135deg, rgba(0,123,255,0.05), rgba(0,123,255,0.15))
     - 2px青枠線: border: 2px solid #007bff
     - 浮遊効果: transform: translateY(-3px)
     - シャドウ強化: box-shadow: 0 4px 8px rgba(0,123,255,0.25)
   - **条件分岐**: hasWorkDate && !isAnytime で判定

5. **カレンダービュー強化（オプションC）: ガントチャート連動ハイライト** - 完了
   - **双方向ハイライト実装**:
     - カードホバー時: highlightGanttBar(taskId, true) でガントバー強調
     - ガントバーホバー時: highlightTaskCard(taskId, true) でカード強調
   - **ハイライト効果**:
     - カード: transform: translateY(-5px) scale(1.02), 黄色シャドウ・枠線
     - ガントバー: transform: translateY(-2px) scale(1.05), 黄色シャドウ・枠線
   - **イベント処理**: mouseenter/mouseleave リスナー追加

6. **カレンダービュー強化（オプションB）: ガントバー ドラッグリサイズ機能** - 完了
   - **データベース拡張**: 18.add-end-date-column.sql による end_date列追加
   - **3層構造実装**:
     - 左ハンドル: work_date（開始日）調整
     - 中央エリア: 既存のドラッグ移動機能維持
     - 右ハンドル: end_date（終了日）調整
   - **リサイズ処理**:
     - startResize(e, taskId, handle): resizeState初期化、mousemoveリスナー登録
     - handleResize(e): リアルタイムバー幅・位置更新
     - endResize(e): Supabase更新、リスナー解除
   - **日付計算**: セル幅と移動距離から営業日数を算出
   - **ビジュアル**: 左右ハンドル（6px幅、黄色半透明、ホバー時濃色）

7. **全担当者表示改善** - 完了
   - **表示形式変更**: ID列を担当者名/事業者名の階層表示に変更
   - **グルーピング実装**:
     - 担当者IDでソート
     - 担当者変更時に青背景ヘッダー行挿入（担当者名表示）
     - 各タスク行には事業者名表示
     - 担当者間に3px青色区切り線
   - **その他業務対応**: client_id=nullのタスクに「その他業務」表示
   - **列幅調整**: 全担当者60px → 事業者名表示に拡大、個人72px維持
   - **マスターデータ参照修正**: this.masterData.staff → this.staffs に修正

8. **パフォーマンス最適化** - 完了
   - **イベント委譲実装**:
     - ガントチャート日付ヘッダー: 183個のインラインハンドラ → 2個の委譲リスナー
     - D&Dイベント: 数千個のインラインハンドラ → 3個の委譲リスナー
     - リサイズハンドル: インラインonmousedown → CSS :hoverとイベント委譲
   - **計算キャッシュ実装**:
     - 休日判定: 60日×3箇所=180回 → 60回（67%削減）
     - bgColor・icon事前計算
     - sessionStorageにキャッシュ保存
   - **期待効果**: メモリ使用量70-80%削減、レンダリング速度50-60%向上

9. **UIテキスト追加** - 完了
   - **操作説明追加**: 「依頼中タスク」セクションに操作ヘルプテキスト追加
   - **表示内容**: "（ドラッグアンドドロップでステータスの変更、ダブルクリックで編集画面に移動できます）"
   - **スタイル**: font-size: 11px, color: #6c757d

10. **end_dateバグ修正** - 完了
    - **バグ**: カードをガントチャートにドロップ時、end_dateが2081-07-30になる
    - **原因**: work_date=nullタスクがnew Date(null)=1970/1/1から期間計算、新日付+55年=2081
    - **修正**: work_date存在チェック追加、nullの場合はend_dateをnullにクリア
    - **コード**: handleGanttDrop() lines 6092-6109で条件分岐実装

11. **ドラッグ競合解決** - 完了
    - **問題**: リサイズハンドルのドラッグが中央エリアのD&D機能と干渉
    - **修正**:
      - リサイズハンドルに draggable="false" 属性追加
      - isDragging フラグで状態管理
      - startResize() で isDragging チェック追加

12. **列幅ズレ修正** - 完了
    - **問題**: タスク行とプレースホルダー行で事業者列の幅が不一致
    - **原因**: padding・line-height・font-sizeの不統一
    - **修正**: 全要素を padding: 2px, line-height: 1.1 に統一

13. **仕様書更新** - 完了
    - **claude-Specification.txt更新**: カレンダービュー強化・全担当者表示改善のドキュメント化
    - **技術詳細記載**: リサイズ機能・イベント委譲・キャッシュ戦略の詳細仕様
    - **バグ修正記録**: ステータス表示・end_date計算・列幅調整の修正プロセス

#### 前回セッション（10/1）- 二段階認証システム実装・担当者選択機能・管理者権限

1. **二段階認証システム完全実装** - 完了
   - **認証フロー設計**: Google OAuth + 担当者選択の2段階認証
   - **select-user.html作成**: 美しい担当者選択画面の実装
   - **sessionStorage活用**: selected-staff-id・selected-staff-nameの永続化
   - **自動ルーティング**: 担当者未選択時の自動リダイレクト機能

2. **supabase-client.js認証ロジック拡張** - 完了
   - **getCurrentUserWithRouting()**: 担当者選択チェック機能実装
   - **getSelectedStaffId()**: 選択された担当者ID取得関数
   - **getSelectedStaff()**: 選択された担当者情報取得関数（staffsテーブル参照）
   - **signOut()拡張**: sessionStorageクリア処理追加
   - **OAuth redirect修正**: /select-user.htmlへのリダイレクト設定

3. **analytics.js担当者フィルター自動適用** - 完了
   - **デフォルトフィルター設定**: selected-staff-idに基づく自動フィルター適用
   - **管理者例外処理**: staff_id = 1は全体表示（フィルター無し）
   - **自動分析実行**: フィルター適用後のperformAnalysis()自動実行
   - **日本時間対応**: 全データ取得時の担当者別フィルタリング

4. **task-management.js担当者連携** - 完了
   - **ユーザー識別改善**: sessionStorageの選択担当者優先・emailフォールバック
   - **後方互換性維持**: 従来のメールベース認証も継続サポート
   - **デフォルト受任者設定**: 担当者フィルター選択時の自動受任者設定機能

5. **index.html担当者選択ボタン追加** - 完了
   - **管理メニュー追加**: 「担当者選択」ボタン（紫グラデーション）配置
   - **sessionStorageクリア**: 再選択時の既存選択情報削除
   - **UI統一**: 既存管理メニューとの統一デザイン

6. **自動非表示機能の一時無効化** - 完了（将来再実装予定）
   - **task-management.js修正**: 確認待ち（作業完了）タスクの翌日非表示機能をコメントアウト（lines 2984-2998）
   - **TODO追加**: 将来の再実装用コメント記載
   - **依頼者表示維持**: 依頼者側では引き続き表示される仕様維持
   - **再実装方法**: task-management.jsのlines 2984-2998のコメントを解除して元に戻す

7. **履歴表示機能の簡素化** - 完了
   - **チェックボックス削除**: task-management.htmlから履歴表示チェックボックス削除
   - **確認完了タスクのみ表示**: 履歴モードでは「確認完了」ステータスのみフィルター
   - **タイトル動的変更**: 履歴モード時「履歴タスク管理」表示・確認完了タスク数カウント
   - **localStorage簡素化**: 不要な履歴設定保存処理削除

8. **簡易表示モードデフォルト設定** - 完了
   - **デフォルトON**: this.isSimpleView = true に変更
   - **localStorage対応**: 未保存時はONとして扱う処理追加

9. **URL参照フィールド高さ修正** - 完了
   - **task-styles.css修正**: #reference-url-display に max-height: 38px 設定
   - **モーダル高さ固定**: URL入力時のモーダル縦伸び防止

10. **ナビゲーション一貫性向上** - 完了
    - **index.html追加**: タスク管理タブ追加
    - **details.js・task-management.js**: 設定リンクイベントリスナー追加
    - **絶対パスリダイレクト**: サブディレクトリからの正確な遷移保証

#### 前回セッション（9/30）- タスク管理システムUI/UX最適化・簡易表示モード実装

1. **動的タイトル更新機能実装** - 完了
   - **担当者フィルタ連動**: 担当者選択時「📋 [担当者名] 受任タスク一覧」動的表示
   - **初期表示修正**: フィルター復元時のタイトル更新処理追加
   - **統一表示**: 全体表示時「📋 全体タスク管理」、フィルタ時個別表示の使い分け

2. **簡易表示モード完全実装** - 完了
   - **トグルスイッチUI**: 「受任中のタスク」タイトル右に緑色トグルスイッチ配置
   - **全セクション対応**: 受任・依頼・確認完了タスク全てで簡易表示切り替え可能
   - **表示項目最適化**: 事業者名（クリック可能）・タスク名・期限日（「期限：」ラベル付き）・ステータス
   - **設定保存**: LocalStorageによる個人設定の永続化
   - **視覚的フィードバック**: オン時緑色背景・光彩効果・ラベル変更（📄 簡易表示）

3. **カウント表示最適化** - 完了
   - **受任タスク数修正**: 「依頼中」ステータスのみカウント（確認待ち・確認完了除外）
   - **メインテーブル連動**: 中央テーブルの「受任タスク一覧」も「依頼中」のみカウント
   - **数値精度向上**: 実際の作業必要数を正確に反映

4. **確認完了タスク視覚化統一** - 完了
   - **ステータス色統一**: メインテーブル・マイタスク全箇所で灰色ステータス表示
   - **タスク全体グレーアウト**: 確認完了タスクの視覚的区別強化
   - **操作性維持**: ステータスボタンは引き続きクリック可能（誤操作修正対応）

5. **タスク詳細モーダル機能拡張** - 完了
   - **依頼者情報表示**: モーダルタイトル右に「依頼者: [名前]」表示
   - **ステータスボタン統合**: モーダル内でリアルタイムステータス変更可能
   - **動的UI更新**: ステータス変更時の即座反映（ページリロード不要）
   - **参照URL高さ制限**: 最大60px・スクロール表示でモーダルサイズ固定

#### 前回セッション（9/29）- テンプレート管理システム完全実装・データベーススキーマ最適化

1. **テンプレート管理システム完全実装** - 完了
   - **3列レイアウト統合**: task-management.htmlページ内に月次自動・個別・共有テンプレートの3列配置実装
   - **データベーススキーマ最適化**: K-3-fix-client-column.sql・K-4-add-recurring-fields.sqlによる段階的マイグレーション
   - **検索可能クライアント選択**: 新規タスク作成と同一のSearchableSelectコンポーネント実装
   - **包括的CRUD操作**: テンプレート作成・編集・削除・表示の完全対応

2. **月次自動タスク作成機能実装** - 完了
   - **定期実行設定**: 毎月期限日・何日前作成の詳細設定機能
   - **テンプレート連携**: task_templatesテーブルとのリレーション実装
   - **編集・削除対応**: 既存月次タスクの詳細編集・削除機能
   - **データ整合性**: 外部キー制約・カスケード削除による安全な操作

3. **データベース統合・スキーマ修正** - 完了
   - **client_name→client_id変換**: task_templatesテーブルの正規化実装
   - **recurring_tasks拡張**: create_days_before・due_day・display_order列追加
   - **フォールバック処理**: UI初期化失敗時の通常select要素フォールバック実装
   - **null値対応**: optional chaining・fallback値による堅牢なデータ処理

4. **UI/UX統合最適化** - 完了
   - **統一デザインシステム**: 既存タスク管理と同一のCSS変数・コンポーネント活用
   - **エラーハンドリング強化**: 包括的エラー処理・ユーザーフレンドリーメッセージ実装
   - **モード切り替え**: 表示モード・編集モードの明確な分離
   - **フォーム統一**: 事業者名・参照URL・想定時間・既定受託者の標準化実装

#### 前回セッション（9/28）- タスク管理システム完全実装・履歴閲覧システム・時間ベース非表示機能

1. **タスク管理システム完全実装** - 完了
   - **既存アプリとの統合**: 事業者管理アプリへの完全統合・マスターデータ連携
   - **新規データベーステーブル**: tasks・task_templates・recurring_tasksの3テーブル追加実装
   - **ワークフロー管理**: 依頼中 → 作業完了（確認待ち） → 確認完了の3段階ステータス実装
   - **スマート通知システム**: 関係者のみ対象・5秒間隔での効率的な新規タスク通知

2. **マイタスクパネル・ソート機能実装** - 完了
   - **受任タスクソート**: 依頼中 → 確認待ち → 確認完了の優先順実装
   - **依頼タスクソート**: 確認待ち → 依頼中 → 確認完了の優先順実装
   - **時間ベース非表示**: 確認待ち→翌日非表示、確認完了→1日後非表示の自動制御
   - **コンパクト表示**: 事業者リンク・期限警告・ステータスバッジ統合レイアウト

3. **高機能履歴閲覧システム実装** - 完了
   - **期間指定フィルター**: 現在のタスクのみ・過去7日間・過去30日間・すべての履歴対応
   - **詳細検索機能**: タスク名・事業者名・内容での全文検索（正規化対応）
   - **表示設定制御**: 確認完了タスク・通常非表示タスクの表示/非表示切り替え
   - **ローカルストレージ連携**: 履歴設定の自動保存・復元機能

4. **UI/UX統合・デザイン最適化** - 完了
   - **統一デザインシステム**: 既存アプリのCSS変数・コンポーネント完全活用
   - **履歴ボタン修正**: HTMLとJavaScript ID不一致修正・黄色グラデーションデザイン実装
   - **レスポンシブ対応**: 全デバイス対応の統一UI・モバイル最適化
   - **4段階優先度ソート**: ステータス → 期限切れ → 期限日 → 作成日の総合優先度システム

5. **時間ベース非表示ロジック精緻化** - 完了
   - **受託者・依頼者別制御**: 受託者のみ確認待ちタスクが翌日非表示、依頼者には継続表示
   - **日本時間基準の実装**: UTC+9での日付変更（0:00）を基準とした実用的な非表示制御
   - **confirmed_at判定精密化**: ステータス「確認完了」かつconfirmed_atがある場合のみ非表示適用
   - **データベース・UI分離設計**: ステータス「作業完了」→表示「確認待ち」の一貫した設計維持

#### 前回セッション（9/23）- エクスポート機能拡張・UI改善・ページ遷移最適化

1. **進捗マトリクス表エクスポート機能拡張** - 完了
   - **ID列・経理方式列追加**: CSV・Excel・PDF全形式でID・経理方式列を追加実装
   - **項目順序統一**: 「ID」「事業者名」「担当者」「決算月」「経理方式」「進捗率」「年月列」の順に統一
   - **analytics.js修正**: generateCSVData()、createCombinedSheet()、generateDashboardStyleTable()の3関数を更新

2. **管理メニュー最適化** - 完了
   - **不要機能削除**: index.htmlから「列幅リセット」「スクロールモード」ボタンとその処理を完全削除
   - **JavaScript関数削除**: resetColumnWidths()、initResponsiveTable()、テーブルモード切り替え関連機能を削除
   - **基本機能保持**: initBasicResponsiveTable()で最小限のレスポンシブ機能を維持

3. **ページ遷移ロジック改善** - 完了
   - **edit.html遷移先分岐**: 新規作成時→index.html、編集時→analytics.html の遷移先分岐実装
   - **戻るボタン対応**: edit.htmlの戻るボタンもモード別遷移に対応
   - **リダイレクト問題解決**: 新規作成時のindex.html遷移でsessionStorage設定によりanalytics.htmlへの自動リダイレクトを防止

#### 前回セッション（9/21）- UI改善・エラー修正・ダッシュボード最適化

1. **UI改善とナビゲーション最適化** - 完了
   - **performance.htmlタイトル統一**: 「集計期間設定」文言削除・「担当者別パフォーマンスダッシュボード」タイトル統一
   - **タブナビゲーション改善**: 「担当者別」タブの表記を「担当者別進捗」に変更
   - **タブアニメーション強化**: アクティブタブの引き込み効果増強（transform: translateX(8px) translateY(2px)）

2. **ダッシュボードレイアウト大幅改善** - 完了
   - **4列レイアウト実装**: 25% + 25% + 50%の効率的配置
   - **サマリーカード水平表示**: 縦配置から横配置への変更で視認性向上
   - **要注意クライアント専用列**: 独立した25%幅でのリスト表示
   - **週次進捗グラフ拡張**: 50%幅での大画面表示対応
   - **モーダル機能実装**: 10件超過時の全要注意クライアント表示機能

3. **レイアウト精密調整** - 完了
   - **40%/60%分割**: サマリーカード40%・円グラフ60%の最適配置
   - **垂直中央揃え**: サマリーカードの美的配置調整
   - **円グラフ復旧**: 左右レイアウト（左: グラフ、右: 凡例）への再配置

4. **ナビゲーション・エラー修正** - 完了
   - **クリック動作統一**: 要注意クライアントを新タブではなく同一タブ遷移に変更
   - **データベースエラー解決**: attentionClientsのid/staffName未定義エラー修正
   - **円グラフサイズ復旧**: commit eed561f仕様（140x140px、min-height: 182px）への復元

#### 前回セッション（9/21）- analytics.html統合メイン画面化プロジェクト完了

1. **analytics.html統合メイン画面化** - 完了
   - **index.htmlカバーレイヤー実装**: デフォルトON状態のカバーオーバーレイシステム
   - **「設定画面へ移動」ボタン追加**: 既存「メイン画面に戻る」ボタンを流用して設置
   - **「その他のアプリ」機能完全移設**: Supabase連携・ドラッグ&ドロップ並び替え機能付き
   - **全ページ遷移先統一**: edit.html・details.htmlからanalytics.htmlへのリダイレクト設定
   - **Google OAuth設定変更**: ログイン後のリダイレクト先をanalytics.htmlに変更

2. **Google Cloud Console設定変更** - 完了
   - **承認済みJavaScript生成元**: https://mori-jigyosya.vercel.app 追加
   - **承認済みリダイレクトURI**: /analytics.html 追加設定
   - **認証フロー最適化**: Googleログイン後の統一ダッシュボード遷移

3. **設定画面遷移修正** - 完了
   - **「設定画面へ」ボタン修正**: analytics.js・performance.jsでindex.htmlへの正しいリダイレクト復旧

#### 前回セッション（9/20）- analytics.htmlレイアウト最適化

1. **レイアウト最適化実装** - 完了
   - **フィルターセクション統合**: 統合ヘッダー & フィルターエリアとして一つのセクションに統合
   - **タイトル移動**: 「進捗管理ダッシュボード」タイトルをフィルターセクション内の最上部に配置
   - **ボタン配置最適化**: 「担当者別パフォーマンス」と「メイン画面に戻る」ボタンを右上に配置
   - **スペース効率化**: 「フィルター & アクション」テキスト削除により情報表示エリア最大化

2. **進捗マトリクス表最適化** - 完了
   - **タイトル間隔調整**: 「進捗マトリクス表」タイトルとテーブル間の空間を縮小
   - **表示密度向上**: margin調整により更なる情報表示領域確保

#### 前回セッション（9/18）- グラフ最適化 & メイン画面統合準備

1. **週次進捗グラフ最適化** - 完了
   - **Y軸スケール改善**: 完了タスク数縦軸の最低値をMAXの50%に設定
   - **視覚的改善**: 縦軸範囲の最適化によりグラフの見やすさを大幅向上
   - **メイン・コンパクト版対応**: 両チャートタイプで統一適用

2. **開発ブランチ整理** - 完了
   - **メインブランチ統合**: 修正内容をmainブランチにcommit・保存
   - **ブランチクリーンアップ**: feature/dashboard-main-migrationブランチ削除
   - **作業環境整備**: メイン画面統合作業のための準備完了

#### 前回セッション（9/16）- 週次進捗グラフ機能完全実装

1. **週次進捗グラフ機能実装** - 完了
   - **SQLテーブル作成**: weekly_progress_snapshots テーブル新規作成・RLS設定完了
   - **データベースAPI**: saveWeeklySnapshot(), getWeeklyTrends() 関数実装完了
   - **Chart.js統合**: 3軸折れ線グラフ（進捗率・完了タスク数・要注意クライアント数）
   - **フィルター連動**: 既存フィルター条件（期間・担当者・決算月・事業者名）完全対応
   - **スナップショット保存**: 手動記録機能実装・リアルタイムデータ保存
   - **前週比計算**: 累積進捗率ベースでの前週比増減値表示
   - **要注意クライアント**: 進捗50%未満クライアントの可視化（赤色表示）
   - **ツールチップ最適化**: 各グラフライン固有の詳細情報表示
   - **UI改善**: トグル表示・週次データ統計情報・最新記録日表示

2. **データ一貫性修正** - 完了
   - **進捗計算統一**: ダッシュボードと週次グラフ間の計算方式統一
   - **期間フィルター修正**: 13ヶ月表示問題を12ヶ月表示に修正
   - **累積タスク方式**: クライアント平均から累積タスク数ベース計算に変更

3. **UI/UX最適化** - 完了
   - **ツールチップ情報整理**: 重複情報削除・各グラフライン固有情報表示
   - **月次完了から要注意表示**: 分かりにくい月次完了数を要注意クライアント数に変更
   - **視覚的改善**: 警告色（赤）での要注意クライアント強調表示

#### 前回セッション（9/15）- UI/UX改善 & PDF最適化 & 進捗表示機能強化

1. **詳細画面JavaScript修正** - 完了
   - **変数名不一致修正**: `generalMemoField` → `generalMemoFieldField` で変数名統一
   - **URL自動リンク化エラー解決**: initializeAutoLinkify関数のReferenceError修正
   - **構文チェック**: JavaScriptエラーの完全解消

2. **担当者別パフォーマンス一覧機能改善** - 完了
   - **フィルタリング機能**: 担当クライアント数が0の担当者を非表示化
   - **表示最適化**: アクティブな担当者のみを一覧表示
   - **3つの関数修正**: displayPerformanceResults, sortTable, displaySortedResults

3. **進捗マトリクス表の視覚的改善** - 完了
   - **資料受付完了表示**: 分子が1の場合に📋アイコンを自動表示
   - **2箇所での実装**: メイン表示関数とPDF印刷用関数の両方に対応
   - **直感的UI**: 1/5 → 📋 1/5 で資料受付状況を一目で把握可能

4. **PDFエクスポート機能の大幅改善** - 完了
   - **ダッシュボード準拠デザイン**: 現在の画面と同じ見た目でPDF生成
   - **横向きレイアウト**: A4 landscape形式での最適化
   - **情報密度向上**: ヘッダー情報を1行に集約、サマリーを枠なし表示
   - **決算月表示**: サイトと同様の赤線表示（📅アイコン削除）
   - **年月列幅統一**: 50px固定で整列表示
   - **行高最適化**: セルパディング縮小（6px→2px）で情報量最大化

5. **週次進捗グラフ機能の設計** - 計画完了
   - **実装計画書作成**: 7ステップの詳細手順書を作成
   - **データベース設計**: weekly_progress_snapshots テーブル仕様策定
   - **フィルター連動**: 既存フィルター条件に完全対応
   - **Chart.js実装**: 折れ線グラフによる週次推移表示
   - **総所要時間**: 約2時間15分の実装予定



#### 次回以降の実装予定（優先順位順）

1. **週次進捗グラフ自動化機能拡張**【次回最優先】
   - 自動スナップショット保存機能（日次・週次選択可能）
   - スナップショット管理機能（古いデータの自動削除・アーカイブ）
   - 週次グラフのカスタマイズ機能（表示期間・グラフ種類選択）
   - CSV/PDFエクスポート機能（週次トレンドデータの出力）
   - 閾値アラート機能（進捗率低下時の自動通知）

2. **悲観ロック機能の修復**
   - 編集競合防止システムの改善
   - 強制解除機能の最適化
   - タイムアウト処理の調整

3. **通知システム実装**
   - 期限接近アラート
   - 完了通知
   - システム更新通知

4. **詳細レポート機能**
   - 月次・年次レポート生成
   - PDF出力機能
   - カスタマイズ可能なレポートテンプレート

5. **高度検索機能**
   - 複合条件検索
   - 保存済み検索条件
   - 検索履歴管理

6. **パフォーマンス最適化**
   - 大量データ処理の高速化
   - キャッシュ戦略の改善
   - 遅延読み込み（Lazy Loading）の実装

#### 現在の完成度
- **基本機能**: 100%完成（全体メモ機能追加）
- **担当者管理機能**: 100%完成（CSV抽出機能・UI最適化完了）
- **データ整合性チェック**: 100%完成（決算月対応・JSONパース修正完了）
- **自動バックアップシステム**: 100%完成（GitHub Actions + Supabase Storage・無料プラン対応・ページネーション完全実装）
- **手動バックアップ・復元**: 100%完成
- **UI/UX**: 100%完成（PDFエクスポート最適化・進捗表示改善完了）
- **モバイル対応**: 100%完成
- **データ管理**: 100%完成（自動バックアップシステム完全対応）
- **分析機能**: 100%完成（担当者フィルタリング・進捗表示改善完了）
- **エクスポート機能**: 100%完成（PDF最適化・ダッシュボード準拠デザイン完了）
- **カスタマイズ機能**: 100%完成（個人設定対応）
- **グラフ機能**: 100%完成（週次進捗グラフ完全実装・要注意クライアント可視化完了）
- **メイン画面統合**: 100%完成（analytics.html統合メイン画面化プロジェクト完了）
- **認証システム**: 100%完成（Google OAuth設定・リダイレクト統一完了）
- **タスク管理システム**: 100%完成（統合アプローチ・高機能履歴閲覧システム・UI/UX最適化・簡易表示モード完了）
- **通知システム**: 100%完成（スマート通知システム実装完了）
- **テンプレート管理システム**: 100%完成（3列レイアウト・月次自動タスク・検索可能クライアント選択完了）
- **高度機能**: 100%完成（進捗マトリクス視覚改善により完成）

(以下、変更なし)

## 次回セッションでの実装予定作業事項（2025年9月28日更新）

### **最高優先度実装項目**

1. **進捗マトリクス表機能拡張** - 完了済み
   - **ID列追加**: 顧客IDの表示列追加 ✅
   - **経理方式列追加**: 記帳代行/自計の表示列追加 ✅
   - **編集ボタン列追加**: 各行に編集ボタン配置 ✅

### **高優先度実装項目**

1. **週次進捗グラフ自動化機能の実装**
   - **自動スナップショット**: Edge Functions + Cron Job による週次自動記録
   - **データ管理**: 古いスナップショットの自動削除・アーカイブ機能
   - **実装時間**: 約3時間（Supabase設定含む）

2. **週次グラフエクスポート機能**
   - **CSV出力**: 週次トレンドデータの完全エクスポート
   - **PDF出力**: グラフ画像付きレポート生成
   - **実装時間**: 約1.5時間

### **中優先度実装項目**

1. **スマートデバウンス自動保存機能の実装**
   - **対象画面**: 詳細画面（details.html）
   - **実装方式**: 3秒デバウンス + AutoSaveManagerクラス
   - **準備状況**: 完全な実装手順書（claude-autosave-implementation.txt）
   - **実装時間**: 約2.5時間（テスト含む）


---

## 将来的な最適化計画

### 週次進捗データ容量最適化 (必要時実装)

**実装時期**: データ容量100MB超過時、または性能劣化時

**案1: データ圧縮 (48%削減)**
```sql
-- 非正規化フィールド削除版
CREATE TABLE weekly_progress_snapshots_optimized (
  id SERIAL PRIMARY KEY,
  week_date DATE,
  client_id INTEGER REFERENCES clients(id),
  staff_id INTEGER REFERENCES staffs(id),
  progress_rate DECIMAL(5,2),
  completed_tasks INTEGER,
  total_tasks INTEGER,
  created_at TIMESTAMP DEFAULT NOW()
);
-- fiscal_month, client_name, staff_name を参照に変更
```

**案2: 自動アーカイブ機能**
```sql
-- 2年以上古いデータを月次集約
CREATE TABLE monthly_progress_archive (
  month_date DATE,
  client_id INTEGER,
  avg_progress_rate DECIMAL(5,2),
  avg_completed_tasks INTEGER,
  avg_total_tasks INTEGER
);
```

**案3: 段階的保存頻度**
- 直近3ヶ月: 週次保存
- 3ヶ月〜1年: 月次保存
- 1年以上: 四半期保存

**容量監視**
- 現在予測: 10年で3.5MB (問題なし)
- 監視指標: 年間500MB増加で要検討
- 確認方法: Supabaseダッシュボード定期確認

---

## 開発時の注意
①commit分は短く英文で作成してください
②開発はステップバイステップで進めて下さい
③良いアイデアがあったら教えてください
④**安定性を最優先**とし、問題発生時は即座にロールバックを実行してください

共有用完成

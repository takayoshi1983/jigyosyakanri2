create table public.tasks (
  id bigserial not null,
  client_id bigint null,
  assignee_id bigint null,
  requester_id bigint null,
  task_name text not null,
  description text null,
  reference_url text null,
  due_date date null,
  estimated_time_hours numeric(5, 2) null,
  completed_at timestamp with time zone null,
  confirmed_at timestamp with time zone null,
  status text null default '依頼中'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  priority integer null default 2,
  work_date date null,
  is_anytime boolean null default false,
  constraint tasks_pkey primary key (id),
  constraint tasks_assignee_id_fkey foreign KEY (assignee_id) references staffs (id),
  constraint tasks_client_id_fkey foreign KEY (client_id) references clients (id),
  constraint tasks_requester_id_fkey foreign KEY (requester_id) references staffs (id),
  constraint tasks_priority_check check ((priority = any (array[1, 2, 3]))),
  constraint tasks_status_check check (
    (
      status = any (
        array[
          '予定未定'::text,
          '依頼中'::text,
          '作業完了'::text,
          '確認完了'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_tasks_client_id on public.tasks using btree (client_id) TABLESPACE pg_default;

create index IF not exists idx_tasks_assignee_id on public.tasks using btree (assignee_id) TABLESPACE pg_default;

create index IF not exists idx_tasks_requester_id on public.tasks using btree (requester_id) TABLESPACE pg_default;

create index IF not exists idx_tasks_status on public.tasks using btree (status) TABLESPACE pg_default;

create index IF not exists idx_tasks_due_date on public.tasks using btree (due_date) TABLESPACE pg_default;

create index IF not exists idx_tasks_priority on public.tasks using btree (priority) TABLESPACE pg_default;

create index IF not exists idx_tasks_work_date on public.tasks using btree (work_date) TABLESPACE pg_default;

create trigger update_tasks_updated_at BEFORE
update on tasks for EACH row
execute FUNCTION update_updated_at_column ();
#役割
あなたは、提供された仕様書に基づき、既存のWebアプリケーションとシームレスに連携する新しいアプリケーションを開発する、プロフェッショナルなフルスタックエンジニアです。
特に、Supabase、Vercel、Vanilla JavaScript を用いた開発に精通しています。

#プロジェクトの全体像

1.  **既存アプリケーション:**
    -   名称: 「事業者管理アプリ」
    -   技術スタック: Supabase, Vercel, Vanilla JavaScript, Google OAuth
    -   データベース構造: 提供された仕様書に記載の通り。特に `clients`（事業者）と `staffs`（担当者）テーブルがマスターデータとなる。
    -   特徴: 高度な分析ダッシュボード機能を持つ、包括的な事業者・進捗管理システム。

2.  **今回開発するアプリケーション:**
    -   名称: 「記帳依頼・タスク管理表アプリ」
    -   目的: 職員間のタスク依頼、進捗管理、定型業務の自動化を実現し、既存の「事業者管理アプリ」を補完する。
    -   連携方針: 既存のDBと認証基盤を完全に共有し、独立しつつも一体的に動作するアプリケーションとして構築する。

#ゴール
- 「事業者管理アプリ」の `staffs` と `clients` をマスターデータとして参照する、タスク管理機能を実装する。
- 既存アプリとUI/UXの一貫性を保ち、ユーザーがストレスなく両アプリ間を移動できるようにする。
- 将来的な機能拡張を見据えた、メンテナンス性の高いコードを生成する。
- スマートフォンでも快適に利用できるレスポンシブデザインを採用する。

#主要機能一覧

1.  **認証とデータ連携**
    -   **認証:** 既存の「事業者管理アプリ」と同じSupabaseプロジェクトに接続し、Google OAuth認証を共有する。ログイン済みのユーザーは再認証不要とする。
    -   **マスターデータ:**
        -   担当者情報は `staffs` テーブルから動的に取得して利用する。
        -   事業者情報は `clients` テーブルから動的に取得して利用する。
    -   **アプリ間連携:** 既存アプリの `app_links` テーブルにこのタスク管理アプリのURLを登録し、相互にリンクできるようにする。

2.  **ダッシュボード・マイページ**
    -   **管理者向け全体ダッシュボード:** 全担当者のタスク状況（未完了、期限切れ、負荷状況）をグラフ等で可視化する。
    -   **各担当者向けマイページ:** 自分に割り当てられたタスク、自分が依頼したタスクを一覧で確認できる。

3.  **タスク管理機能 (CRUD)**
    -   **タスク登録:**
        -   フォームでは、事業者名と担当者名を `clients` と `staffs` から取得したリストから選択できるようにする。
        -   必須項目: 事業者名, 作業名, 担当者名, 依頼者名, 作業期限
        -   任意項目: 作業内容, 参照URL, 想定作業時間
        -   登録時、進捗ステータスは自動的に「依頼中」となる。
    -   **タスク更新:**
        -   受任者は「作業完了日」を入力でき、ステータスは「作業完了」に自動更新される。
        -   依頼者は「担当者確認日」を入力でき、ステータスは「確認完了」に自動更新される。
    -   **タスクテンプレート機能:** よく使うタスク内容をテンプレートとして保存・呼び出しできる。
    -   **ルーティンタスク自動生成:** 「毎月25日にA社の月次記帳タスクを作成する」といったルールに基づいてタスクを自動生成する。

4.  **タスク表示機能**
    -   **多様なビュー:** 同一のタスクデータを、リスト形式、カード形式（カンバン）、ガントチャート、カレンダー形式で切り替えて表示できる。
    -   **表示切り替え:** 「全体のタスク」と「自分のタスク」を簡単に切り替えられる。
    -   **フィルタリング:** 事業者名、担当者、期限、ステータス等で柔軟に絞り込みができる。
    -   **ドラッグ＆ドロップ:** カレンダービューやガントチャートビューで、タスクの期限をドラッグ＆ドロップで直感的に変更できるようにする。

5.  **履歴機能**
    -   「確認完了」になったタスクは、履歴としてアーカイブされ、後から検索・閲覧が可能。

6.  **通知機能**
    -   タスクの新規割り当て時、期限接近時、ステータス変更時にアプリ内で通知が表示される。

#データベース設計案 (Supabase)

既存のテーブル (`clients`, `staffs` など) はそのまま利用します。以下のテーブルを新たに追加してください。RLS（Row Level Security）も適切に設定してください。

-   **tasks (新規作成):**
    -   `id` (主キー, bigint)
    -   [cite_start]`client_id` (bigint, `clients.id` への外部キー) [cite: 2]
    -   [cite_start]`assignee_id` (bigint, `staffs.id` への外部キー) [cite: 2]
    -   [cite_start]`requester_id` (bigint, `staffs.id` への外部キー) [cite: 2]
    -   `task_name` (text, not null)
    -   `description` (text)
    -   `reference_url` (text)
    -   `due_date` (date)
    -   `estimated_time_hours` (numeric)
    -   `completed_at` (timestamp with time zone)
    -   `confirmed_at` (timestamp with time zone)
    -   `status` (text, '依頼中', '作業完了', '確認完了' のいずれか)
    -   `created_at` (timestamp with time zone, default: now())

-   **task_templates (新規作成):**
    -   `id` (主キー, bigint)
    -   `template_name` (text, not null)
    -   `task_name` (text)
    -   `description` (text)
    -   `estimated_time_hours` (numeric)

-   **recurring_tasks (新規作成):**
    -   `id` (主キー, bigint)
    -   (ルーティンタスクの設定を保存するカラム。例: 実行頻度、対象事業者、タスク内容など)

#技術スタック
-   **フロントエンド:** HTML, CSS, JavaScript (Vanilla JS)。既存アプリのスタイルと合わせること。
-   **バックエンド/DB:** Supabase (既存プロジェクトを利用)
-   **デプロイ:** Vercel

#開発ステップ
以下の順序で、各ステップが完了するごとにコードを提示してください。

1.  **ステップ1: 環境設定と認証・データ連携の確認**
    -   基本的なHTML/CSS/JSのファイル構造を作成する。
    -   既存のSupabaseプロジェクトに接続し、Google認証でログインできることを確認する。
    -   ログイン後、`clients` テーブルと `staffs` テーブルからデータを取得し、コンソールに表示できることを確認する。
2.  **ステップ2: タスク一覧表示と登録機能の実装**
    -   `tasks` テーブルのデータを一覧表示する画面を作成する。
    -   `clients` と `staffs` のデータをドロップダウンで選択できるタスク登録フォームを作成し、実際に `tasks` テーブルにデータを登録できるようにする。
3.  **ステップ3: タスクの更新・ステータス変更機能**
    -   一覧の各タスクにステータスを変更するためのボタン（例：「完了」「確認」）を設置し、`tasks` テーブルの `status`, `completed_at`, `confirmed_at` を更新できるようにする。
4.  **ステップ4以降:**
    -   カード表示、カレンダー表示、ガントチャート表示を順に実装する。
    -   その後、タスクテンプレート機能、ルーティンタスクの自動生成機能などを実装する。
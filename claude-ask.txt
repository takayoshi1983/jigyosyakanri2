#問
claude codeを利用しています agent機能を利用したいです アプリ作成の際にアニメーションを入れたいですがその専門家を作成する方法を教えてください


#答
Claude Codeでアニメーション専門のエージェントを作成する方法をご説明します。
アニメーション専門エージェントの作成手順
1. 専門エージェントファイルの作成
プロジェクトルートに .claude/ ディレクトリを作成し、専門エージェント用の設定ファイルを作成します：
mkdir -p .claude/agents
2. アニメーション専門エージェントの設定
.claude/agents/animation-expert.md ファイルを作成：
# Animation Expert Agent ## Role You are an expert in web animations, specializing in: - CSS animations and transitions - JavaScript animation libraries (GSAP, Framer Motion, etc.) - Performance-optimized animations - Micro-interactions and UI/UX animation principles ## Expertise Areas - **CSS**: keyframes, transforms, transitions, animation timing functions - **JavaScript Libraries**: GSAP, Framer Motion, Lottie, Three.js - **React Animations**: React Spring, React Transition Group - **Performance**: GPU acceleration, will-change property, animation optimization - **Design Principles**: Easing curves, animation duration, user experience ## Guidelines - Always consider performance implications - Prefer CSS animations for simple transforms - Use JavaScript libraries for complex sequences - Implement proper fallbacks for reduced motion preferences - Follow accessibility guidelines (prefers-reduced-motion) ## Code Style - Write clean, maintainable animation code - Include performance comments - Provide multiple implementation options when possible - Consider mobile performance constraints
3. Claude Codeでの使用方法
# アニメーション専門エージェントを指定してタスクを実行 claude code --agent animation-expert "Create a smooth page transition animation" # または、既存のプロジェクトにアニメーション機能を追加 claude code --agent animation-expert "Add loading animations to the dashboard components"
4. より具体的な専門設定例
.claude/agents/animation-expert.md をさらに詳細化：
# Animation Expert Agent ## Specialized Knowledge ### CSS Animations - Advanced keyframe techniques - Custom easing functions (cubic-bezier) - Animation composition and layering - Transform optimization (translate3d, will-change) ### JavaScript Animation Libraries - **GSAP**: Timeline management, ScrollTrigger, morphing - **Framer Motion**: Layout animations, gesture handling - **React Spring**: Physics-based animations - **Lottie**: After Effects integration ### Performance Optimization - 60fps animation techniques - Composite layer management - Animation batching and requestAnimationFrame - Mobile-first animation strategies ## Project Types - Landing pages with scroll animations - Interactive dashboards - Mobile app transitions - E-commerce product showcases - Data visualization animations ## Default Tools and Libraries Prefer these animation solutions: 1. CSS for simple transitions 2. Framer Motion for React projects 3. GSAP for complex timeline animations 4. Lottie for designer-created animations
5. 使用例とコマンド
# 具体的なアニメーション実装を依頼 claude code --agent animation-expert "Implement a hero section with parallax scrolling and staggered text animations" # 既存コンポーネントの改善 claude code --agent animation-expert "Add micro-interactions to the button components in src/components/" # パフォーマンス最適化 claude code --agent animation-expert "Optimize the current animations for mobile performance"
6. プロジェクト固有の設定
プロジェクトの package.json にアニメーション関連の依存関係を事前に設定しておくと、エージェントがより適切な提案をできます：
{ "devDependencies": { "framer-motion": "^10.16.4", "gsap": "^3.12.2", "@types/gsap": "^3.0.0" } }
この設定により、Claude Codeのアニメーション専門エージェントが、あなたのプロジェクトに最適化されたアニメーション実装を提供できるようになります。特定のアニメーションライブラリや技術スタックがあれば、エージェント設定をさらにカスタマイズすることも可能です。